/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.Range2Filter = factory(root.ShopApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Range2Filter model module.
   * @module model/Range2Filter
   * @version 17.3
   */

  /**
   * Constructs a new <code>Range2Filter</code>.
   * Document representing a range compare with range filter, named Range2Filter.
   * @alias module:model/Range2Filter
   * @class
   * @param fromField {String} The field name of the field that start the range 1.
   * @param toField {String} The field name of the field that end the range 1.
   */
  var exports = function(fromField, toField) {
    var _this = this;


    _this['from_field'] = fromField;


    _this['to_field'] = toField;


  };

  /**
   * Constructs a <code>Range2Filter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Range2Filter} obj Optional instance to populate.
   * @return {module:model/Range2Filter} The populated <code>Range2Filter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('filter_mode')) {
        obj['filter_mode'] = ApiClient.convertToType(data['filter_mode'], 'String');
      }
      if (data.hasOwnProperty('from_field')) {
        obj['from_field'] = ApiClient.convertToType(data['from_field'], 'String');
      }
      if (data.hasOwnProperty('from_inclusive')) {
        obj['from_inclusive'] = ApiClient.convertToType(data['from_inclusive'], 'Boolean');
      }
      if (data.hasOwnProperty('from_value')) {
        obj['from_value'] = ApiClient.convertToType(data['from_value'], Object);
      }
      if (data.hasOwnProperty('to_field')) {
        obj['to_field'] = ApiClient.convertToType(data['to_field'], 'String');
      }
      if (data.hasOwnProperty('to_inclusive')) {
        obj['to_inclusive'] = ApiClient.convertToType(data['to_inclusive'], 'Boolean');
      }
      if (data.hasOwnProperty('to_value')) {
        obj['to_value'] = ApiClient.convertToType(data['to_value'], Object);
      }
    }
    return obj;
  }

  /**
   * compare mode: overlap, containing, contained (default to \"overlap\"). It is optional.
   * @member {module:model/Range2Filter.FilterModeEnum} filter_mode
   */
  exports.prototype['filter_mode'] = undefined;
  /**
   * The field name of the field that start the range 1.
   * @member {String} from_field
   */
  exports.prototype['from_field'] = undefined;
  /**
   * A flag indicating whether the lower bound of the range is inclusive (or exclusive). The default is true (which means that the given  lower bound is inclusive).
   * @member {Boolean} from_inclusive
   */
  exports.prototype['from_inclusive'] = undefined;
  /**
   * The configured lower bound of the filter range. The lower bound is optional. If not given, the range is  open ended with respect to the lower bound.
   * @member {Object} from_value
   */
  exports.prototype['from_value'] = undefined;
  /**
   * The field name of the field that end the range 1.
   * @member {String} to_field
   */
  exports.prototype['to_field'] = undefined;
  /**
   * A flag indicating whether the upper bound of the range is inclusive (or exclusive). The default is true (which means that the given  upper bound is inclusive).
   * @member {Boolean} to_inclusive
   */
  exports.prototype['to_inclusive'] = undefined;
  /**
   * The configured upper bound of the filter range. The upper bound is optional. If not given, the range is  open ended with respect to the upper bound.
   * @member {Object} to_value
   */
  exports.prototype['to_value'] = undefined;


  /**
   * Allowed values for the <code>filter_mode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FilterModeEnum = {
    /**
     * value: "overlap"
     * @const
     */
    "overlap": "overlap",
    /**
     * value: "containing"
     * @const
     */
    "containing": "containing",
    /**
     * value: "contained"
     * @const
     */
    "contained": "contained"  };


  return exports;
}));


