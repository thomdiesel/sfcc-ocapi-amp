/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Promotion', 'model/PromotionResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Promotion'), require('../model/PromotionResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.PromotionsApi = factory(root.ShopApi.ApiClient, root.ShopApi.Promotion, root.ShopApi.PromotionResult);
  }
}(this, function(ApiClient, Promotion, PromotionResult) {
  'use strict';

  /**
   * Promotions service.
   * @module api/PromotionsApi
   * @version 17.3
   */

  /**
   * Constructs a new PromotionsApi. 
   * @alias module:api/PromotionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getPromotions operation.
     * @callback module:api/PromotionsApi~getPromotionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handles get promotion by filter criteria Returns an array of enabled promotions matching specified filter  criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date  range by providing start_date and end_date parameters. Both parameters are required to specify a date range:  omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled  promotions; the server does not consider promotion qualifiers or schedules.
     * @param {String} campaignId Find the promotions assigned to this campaign (mandatory)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The start date of the promotion in ISO8601 date time format: yyyy-MM-dd&#39;T&#39;HH:mmZ
     * @param {String} opts.endDate The end date of the promotion in ISO8601 date time format: yyyy-MM-dd&#39;T&#39;HH:mmZ
     * @param {String} opts.currency The currency mnemonic specified for price
     * @param {module:api/PromotionsApi~getPromotionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotionResult}
     */
    this.getPromotions = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId == undefined || campaignId == null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getPromotions");
      }


      var pathParams = {
      };
      var queryParams = {
        'campaign_id': campaignId,
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'currency': opts['currency']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PromotionResult;

      return this.apiClient.callApi(
        '/promotions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromotionsByID operation.
     * @callback module:api/PromotionsApi~getPromotionsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Promotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an enabled promotion using a specified id. Each request returns a response only for an enabled promotion;  the server does not consider promotion qualifiers or schedules.
     * @param {String} id The id of the requested promotion.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/PromotionsApi~getPromotionsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Promotion}
     */
    this.getPromotionsByID = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getPromotionsByID");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Promotion;

      return this.apiClient.callApi(
        '/promotions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromotionsByIDs operation.
     * @callback module:api/PromotionsApi~getPromotionsByIDsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/PromotionsApi~getPromotionsByIDsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotionResult}
     */
    this.getPromotionsByIDs = function(ids, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling getPromotionsByIDs");
      }


      var pathParams = {
        'ids': ids
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PromotionResult;

      return this.apiClient.callApi(
        '/promotions/({ids})', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
