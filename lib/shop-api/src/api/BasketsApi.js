/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Basket', 'model/BasketPaymentInstrumentRequest', 'model/CouponItem', 'model/CustomerInfo', 'model/GiftCertificateItem', 'model/Note', 'model/NotesResult', 'model/OrderAddress', 'model/PaymentMethodResult', 'model/PriceAdjustmentRequest', 'model/ProductItem', 'model/Shipment', 'model/ShippingMethod', 'model/ShippingMethodResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Basket'), require('../model/BasketPaymentInstrumentRequest'), require('../model/CouponItem'), require('../model/CustomerInfo'), require('../model/GiftCertificateItem'), require('../model/Note'), require('../model/NotesResult'), require('../model/OrderAddress'), require('../model/PaymentMethodResult'), require('../model/PriceAdjustmentRequest'), require('../model/ProductItem'), require('../model/Shipment'), require('../model/ShippingMethod'), require('../model/ShippingMethodResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.BasketsApi = factory(root.ShopApi.ApiClient, root.ShopApi.Basket, root.ShopApi.BasketPaymentInstrumentRequest, root.ShopApi.CouponItem, root.ShopApi.CustomerInfo, root.ShopApi.GiftCertificateItem, root.ShopApi.Note, root.ShopApi.NotesResult, root.ShopApi.OrderAddress, root.ShopApi.PaymentMethodResult, root.ShopApi.PriceAdjustmentRequest, root.ShopApi.ProductItem, root.ShopApi.Shipment, root.ShopApi.ShippingMethod, root.ShopApi.ShippingMethodResult);
  }
}(this, function(ApiClient, Basket, BasketPaymentInstrumentRequest, CouponItem, CustomerInfo, GiftCertificateItem, Note, NotesResult, OrderAddress, PaymentMethodResult, PriceAdjustmentRequest, ProductItem, Shipment, ShippingMethod, ShippingMethodResult) {
  'use strict';

  /**
   * Baskets service.
   * @module api/BasketsApi
   * @version 17.3
   */

  /**
   * Constructs a new BasketsApi. 
   * @alias module:api/BasketsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteBasketsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a basket.
     * @param {String} basketId the id of the basket to be retrieved
     * @param {module:api/BasketsApi~deleteBasketsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBasketsByID = function(basketId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByID");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/baskets/{basket_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDCouponsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDCouponsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a coupon from the basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} couponItemId the id of the coupon item to be removed
     * @param {module:api/BasketsApi~deleteBasketsByIDCouponsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDCouponsByID = function(basketId, couponItemId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDCouponsByID");
      }

      // verify the required parameter 'couponItemId' is set
      if (couponItemId == undefined || couponItemId == null) {
        throw new Error("Missing the required parameter 'couponItemId' when calling deleteBasketsByIDCouponsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'coupon_item_id': couponItemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/coupons/{coupon_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDGiftCertificateItemsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDGiftCertificateItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a gift certificate item from an existing basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} GiftCertificateItemId the id of the gift certificate item to be removed
     * @param {module:api/BasketsApi~deleteBasketsByIDGiftCertificateItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDGiftCertificateItemsByID = function(basketId, GiftCertificateItemId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDGiftCertificateItemsByID");
      }

      // verify the required parameter 'GiftCertificateItemId' is set
      if (GiftCertificateItemId == undefined || GiftCertificateItemId == null) {
        throw new Error("Missing the required parameter 'GiftCertificateItemId' when calling deleteBasketsByIDGiftCertificateItemsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'gift_certificate_item_id': GiftCertificateItemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/gift_certificate_items/{gift_certificate_item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDItemsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a product item from the basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} itemId the id of the product item to be removed
     * @param {module:api/BasketsApi~deleteBasketsByIDItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDItemsByID = function(basketId, itemId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteBasketsByIDItemsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/items/{item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDNotesByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDNotesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a basket note.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} noteId the id of the note to be removed
     * @param {module:api/BasketsApi~deleteBasketsByIDNotesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDNotesByID = function(basketId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDNotesByID");
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteBasketsByIDNotesByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'note_id': noteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDPaymentInstrumentsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDPaymentInstrumentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a payment instrument of a basket.
     * @param {String} basketId the basket id
     * @param {String} paymentInstrumentId the id of the payment instrument to be removed
     * @param {module:api/BasketsApi~deleteBasketsByIDPaymentInstrumentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDPaymentInstrumentsByID = function(basketId, paymentInstrumentId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId == undefined || paymentInstrumentId == null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling deleteBasketsByIDPaymentInstrumentsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_instruments/{payment_instrument_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDPriceAdjustmentsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDPriceAdjustmentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a custom manual price adjustment from the basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} priceAdjustmentId the uuid of the adjustment to be removed
     * @param {module:api/BasketsApi~deleteBasketsByIDPriceAdjustmentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDPriceAdjustmentsByID = function(basketId, priceAdjustmentId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDPriceAdjustmentsByID");
      }

      // verify the required parameter 'priceAdjustmentId' is set
      if (priceAdjustmentId == undefined || priceAdjustmentId == null) {
        throw new Error("Missing the required parameter 'priceAdjustmentId' when calling deleteBasketsByIDPriceAdjustmentsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'price_adjustment_id': priceAdjustmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/price_adjustments/{price_adjustment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasketsByIDShipmentsByID operation.
     * @callback module:api/BasketsApi~deleteBasketsByIDShipmentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specified shipment and all associated product, gift certificate,  shipping and price adjustment line items from a basket.  It is not permissible to remove the default shipment.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} shipmentId the id of the shipment to be deleted
     * @param {module:api/BasketsApi~deleteBasketsByIDShipmentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.deleteBasketsByIDShipmentsByID = function(basketId, shipmentId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsByIDShipmentsByID");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling deleteBasketsByIDShipmentsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasketsByID operation.
     * @callback module:api/BasketsApi~getBasketsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a basket.
     * @param {String} basketId the id of the basket to be retrieved
     * @param {module:api/BasketsApi~getBasketsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.getBasketsByID = function(basketId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling getBasketsByID");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasketsByIDNotes operation.
     * @callback module:api/BasketsApi~getBasketsByIDNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves notes for a basket.
     * @param {String} basketId The id of the basket for which you want to retrieve the notes.
     * @param {module:api/BasketsApi~getBasketsByIDNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotesResult}
     */
    this.getBasketsByIDNotes = function(basketId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling getBasketsByIDNotes");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = NotesResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasketsByIDPaymentMethods operation.
     * @callback module:api/BasketsApi~getBasketsByIDPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethodResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     * @param {String} basketId the basket id
     * @param {module:api/BasketsApi~getBasketsByIDPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethodResult}
     */
    this.getBasketsByIDPaymentMethods = function(basketId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling getBasketsByIDPaymentMethods");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PaymentMethodResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasketsByIDShipmentsByIDShippingMethods operation.
     * @callback module:api/BasketsApi~getBasketsByIDShipmentsByIDShippingMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShippingMethodResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the applicable shipping methods for a certain shipment of a  basket.
     * @param {String} basketId the id of the basket
     * @param {String} shipmentId the id of the shipment
     * @param {module:api/BasketsApi~getBasketsByIDShipmentsByIDShippingMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShippingMethodResult}
     */
    this.getBasketsByIDShipmentsByIDShippingMethods = function(basketId, shipmentId, callback) {
      var postBody = null;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling getBasketsByIDShipmentsByIDShippingMethods");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getBasketsByIDShipmentsByIDShippingMethods");
      }


      var pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ShippingMethodResult;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}/shipping_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBasketsByID operation.
     * @callback module:api/BasketsApi~patchBasketsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a basket. Only the currency of the basket, source code, and the custom  properties of the basket and of the shipping items will be considered.
     * @param {String} basketId the id of the basket to be modified
     * @param {module:model/Basket} body 
     * @param {module:api/BasketsApi~patchBasketsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.patchBasketsByID = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling patchBasketsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchBasketsByID");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBasketsByIDGiftCertificateItemsByID operation.
     * @callback module:api/BasketsApi~patchBasketsByIDGiftCertificateItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a gift certificate item of an existing basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} GiftCertificateItemId the id of the gift certificate item to be updated
     * @param {module:model/GiftCertificateItem} body 
     * @param {module:api/BasketsApi~patchBasketsByIDGiftCertificateItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.patchBasketsByIDGiftCertificateItemsByID = function(basketId, GiftCertificateItemId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling patchBasketsByIDGiftCertificateItemsByID");
      }

      // verify the required parameter 'GiftCertificateItemId' is set
      if (GiftCertificateItemId == undefined || GiftCertificateItemId == null) {
        throw new Error("Missing the required parameter 'GiftCertificateItemId' when calling patchBasketsByIDGiftCertificateItemsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchBasketsByIDGiftCertificateItemsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'gift_certificate_item_id': GiftCertificateItemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/gift_certificate_items/{gift_certificate_item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBasketsByIDItemsByID operation.
     * @callback module:api/BasketsApi~patchBasketsByIDItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an item in a basket.  The  following values in the request body are considered by the server:    product_id: a valid product id. The purpose of this  value is to exchange a variation of a variation product.  shipment_id: a valid shipment id. The purpose of  this value is to move a product item to another shipment.  quantity: a number between 0 and 999. The purpose of  this value is to change quantity of the product item. If quantity is 0,  the product item is removed.  option_items/option_value_id: a valid option value  id. The purpose of this value is to exchange an option value for an  option item of an option product.   This is only possible if the product item is an option product. To change  option values a collection of option items to be changed need to be  provided in property option_items. Those  option_items need to contain option_id  and option_value_id. The provided values must be valid  for the option product that this product item represents. Otherwise  InvalidProductOptionItemException or  InvalidProductOptionValueItemException will be thrown.  custom properties c_&lt;CUSTOM_NAME&gt;: a  value corresponding to the type defined for custom attribute  &lt;CUSTOM_NAME&gt; of ProductLineItem. The purpose of this value is to  add or change the value of a custom attribute defined for  ProductLineItem.  
     * @param {String} basketId the id of the basket to be modified
     * @param {String} itemId the it of the item to be updated
     * @param {module:model/ProductItem} body 
     * @param {module:api/BasketsApi~patchBasketsByIDItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.patchBasketsByIDItemsByID = function(basketId, itemId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling patchBasketsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchBasketsByIDItemsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchBasketsByIDItemsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/items/{item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBasketsByIDPaymentInstrumentsByID operation.
     * @callback module:api/BasketsApi~patchBasketsByIDPaymentInstrumentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payment instrument of a basket.    Payment instruments are usually authorized after order creation, for example in a custom hook. The default  payment authorization process executes an authorization when a payment instrument is added to an order or  updated. See POST /orders/{order_no}/payment_instruments and PATCH  /orders/{order_no}/payment_instruments/{payment_instrument_id}  
     * @param {String} basketId the basket id
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @param {module:model/BasketPaymentInstrumentRequest} body 
     * @param {module:api/BasketsApi~patchBasketsByIDPaymentInstrumentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.patchBasketsByIDPaymentInstrumentsByID = function(basketId, paymentInstrumentId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling patchBasketsByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId == undefined || paymentInstrumentId == null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling patchBasketsByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchBasketsByIDPaymentInstrumentsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_instruments/{payment_instrument_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBasketsByIDShipmentsByID operation.
     * @callback module:api/BasketsApi~patchBasketsByIDShipmentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a shipment for a basket.    The shipment is initialized with values provided in the body  document and can be updated with further data API calls. Considered from  the body are the following properties if specified    the id  the shipping address  the shipping method  gift boolean flag  gift message  custom properties  
     * @param {String} basketId the id of the basket to be modified
     * @param {String} shipmentId 
     * @param {module:model/Shipment} body 
     * @param {module:api/BasketsApi~patchBasketsByIDShipmentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.patchBasketsByIDShipmentsByID = function(basketId, shipmentId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling patchBasketsByIDShipmentsByID");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling patchBasketsByIDShipmentsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchBasketsByIDShipmentsByID");
      }


      var pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBaskets operation.
     * @callback module:api/BasketsApi~postBasketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new basket. The created basket is initialized with default values. Data provided in the body document  will be populated into the created basket. It can be updated with further Shop API calls.   Considered values from the request body are:    customer information: PUT /baskets/{basket_id}/customer  billing address: PUT /baskets/{basket_id}/billing_address  shipments including shipping address and shipping method: POST /baskets/{basket_id}/shipments  product items: POST /baskets/{basket_id}/items  coupon items: POST /baskets/{basket_id}/coupons  gift certificate items: POST /baskets/{basket_id}/gift_certificates  payment method and card type: POST /baskets/{basket_id}/payment_instruments  custom properties: PATCH /baskets/{basket_id}    Related resource means with which resource you can specify the same data after the basket creation.   Identify the basket using the basket_id property, which  should be integrated into the path of an update request, for example a POST to  /baskets/{basket_id}/items.  The resource supports JWT or  OAuth tokens for authentication:    A customer must provide a JWT, which specifies exactly one customer (it may be a guest or a registered  customer). In this case the resource creates a basket for this customer.  An agent must provide an OAuth token. The agent can use this resource to create a basket for a new created  guest customer, and can later update the customer if desired.     The number of baskets which can be created per customer is limited. When a  basket is created it is said to be open. It remains open until either an order is created from it  using a POST to resource /orders or it is deleted using a DELETE to resource  /baskets/{basket_id}. The number of open baskets allowed depends on the authentication  method used:    When using JWT each customer can have just one open basket  When using OAuth each customer can have up to 4 open baskets (this is a quota setting which can be  updated by support)  
     * @param {Object} opts Optional parameters
     * @param {module:model/Basket} opts.body 
     * @param {module:api/BasketsApi~postBasketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBaskets = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDCoupons operation.
     * @callback module:api/BasketsApi~postBasketsByIDCouponsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a coupon to an existing basket.
     * @param {String} basketId The id of the basket to be modified.
     * @param {module:model/CouponItem} body 
     * @param {module:api/BasketsApi~postBasketsByIDCouponsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDCoupons = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDCoupons");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDCoupons");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDGiftCertificateItems operation.
     * @callback module:api/BasketsApi~postBasketsByIDGiftCertificateItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a gift certificate item to an existing basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {module:model/GiftCertificateItem} body 
     * @param {module:api/BasketsApi~postBasketsByIDGiftCertificateItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDGiftCertificateItems = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDGiftCertificateItems");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDGiftCertificateItems");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/gift_certificate_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDItems operation.
     * @callback module:api/BasketsApi~postBasketsByIDItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds new items to a basket.  The added items are associated with the  specified shipment. If no shipment id is specified, the added items are associated with the default shipment.   Considered values from the request body, for each item are:    product_id: a valid product id. This is the id of the product to be added to the basket. If the  product is already in the basket, the API either increments the quantity of the existing product line item or  creates a new product line item, based on the site preference &#39;Add Product Behavior&#39;. For option products and  product bundles containing variation masters, the API creates a new product line item regardless of the site  preference.  shipment_id: a valid shipment id (optional). This is the id of the shipment in which the product item  is created.  quantity: a number between 0.01 and 999. This is the quantity of the product to order.  inventory_id: a valid inventory id (optional). This is the id of the inventory from which the item is  allocated.  bonus_discount_line_item_id: a valid bonus discount line item id (optional). This is the id of the  bonus discount line item for which the added product is a selected bonus product.  option_items/option_value_id: a valid option value id. This is an option value for an option item of  an option product.  This is only possible if the product item is an option  product. To set option values, you must specify a collection of option items in the option_items  property. These option items must contain option_id and option_value_id. Also,  the values you specify must be valid for the option product that this product item represents. Otherwise, the  server throws an InvalidProductOptionItemException or an  InvalidProductOptionValueItemException.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductLineItem. The value of this property must be valid for the  type of custom attribute defined for ProductLineItem.  
     * @param {String} basketId The id of the basket to be modified.
     * @param {module:model/ProductItem} body 
     * @param {module:api/BasketsApi~postBasketsByIDItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDItems = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDItems");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDItems");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDNotes operation.
     * @callback module:api/BasketsApi~postBasketsByIDNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a note to an existing basket.
     * @param {String} basketId The id of the basket to be modified.
     * @param {module:model/Note} body 
     * @param {module:api/BasketsApi~postBasketsByIDNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDNotes = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDNotes");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDNotes");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDPaymentInstruments operation.
     * @callback module:api/BasketsApi~postBasketsByIDPaymentInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payment instrument to a basket.    Payment instruments are usually authorized after order creation, for example in a custom hook. The default  payment authorization process executes an authorization when a payment instrument is added to an order or  updated. See POST /orders/{order_no}/payment_instruments and PATCH  /orders/{order_no}/payment_instruments/{payment_instrument_id}.  NOTE: If CREDIT_CARD is selected as the payment_method_id, it is mandatory to provide the property card_type.  
     * @param {String} basketId the basket id
     * @param {module:model/BasketPaymentInstrumentRequest} body 
     * @param {module:api/BasketsApi~postBasketsByIDPaymentInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDPaymentInstruments = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDPaymentInstruments");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDPaymentInstruments");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/payment_instruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDPriceAdjustments operation.
     * @callback module:api/BasketsApi~postBasketsByIDPriceAdjustmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a custom manual price adjustment to the basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {module:model/PriceAdjustmentRequest} body 
     * @param {module:api/BasketsApi~postBasketsByIDPriceAdjustmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDPriceAdjustments = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDPriceAdjustments");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDPriceAdjustments");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/price_adjustments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBasketsByIDShipments operation.
     * @callback module:api/BasketsApi~postBasketsByIDShipmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new shipment for a basket.    The created shipment is initialized with values provided in the body  document and can be updated with further data API calls. Considered from  the body are the following properties if specified:    the id  the shipping address  the shipping method  gift boolean flag  gift message  custom properties  
     * @param {String} basketId the id of the basket to be modified
     * @param {module:model/Shipment} body 
     * @param {module:api/BasketsApi~postBasketsByIDShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.postBasketsByIDShipments = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsByIDShipments");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postBasketsByIDShipments");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putBasketsByIDBillingAddress operation.
     * @callback module:api/BasketsApi~putBasketsByIDBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the billing address of a basket.
     * @param {String} basketId The id of the basket to be modified.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.useAsShipping 
     * @param {String} opts.customerAddressId 
     * @param {module:model/OrderAddress} opts.body 
     * @param {module:api/BasketsApi~putBasketsByIDBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.putBasketsByIDBillingAddress = function(basketId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsByIDBillingAddress");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
        'use_as_shipping': opts['useAsShipping'],
        'customer_address_id': opts['customerAddressId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/billing_address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putBasketsByIDCustomer operation.
     * @callback module:api/BasketsApi~putBasketsByIDCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets customer information for an existing basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {module:model/CustomerInfo} body 
     * @param {module:api/BasketsApi~putBasketsByIDCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.putBasketsByIDCustomer = function(basketId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsByIDCustomer");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putBasketsByIDCustomer");
      }


      var pathParams = {
        'basket_id': basketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/customer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putBasketsByIDShipmentsByIDShippingAddress operation.
     * @callback module:api/BasketsApi~putBasketsByIDShipmentsByIDShippingAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a shipping address of a specific shipment of a basket.
     * @param {String} basketId The id of the basket to be modified.
     * @param {String} shipmentId The id of the shipment to be modified.
     * @param {module:model/OrderAddress} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.useAsBilling 
     * @param {String} opts.customerAddressId 
     * @param {module:api/BasketsApi~putBasketsByIDShipmentsByIDShippingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.putBasketsByIDShipmentsByIDShippingAddress = function(basketId, shipmentId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsByIDShipmentsByIDShippingAddress");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling putBasketsByIDShipmentsByIDShippingAddress");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putBasketsByIDShipmentsByIDShippingAddress");
      }


      var pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      var queryParams = {
        'use_as_billing': opts['useAsBilling'],
        'customer_address_id': opts['customerAddressId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}/shipping_address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putBasketsByIDShipmentsByIDShippingMethod operation.
     * @callback module:api/BasketsApi~putBasketsByIDShipmentsByIDShippingMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a shipping method to a specific shipment of a basket.
     * @param {String} basketId the id of the basket to be modified
     * @param {String} shipmentId the id of the shipment to be modified
     * @param {module:model/ShippingMethod} body 
     * @param {module:api/BasketsApi~putBasketsByIDShipmentsByIDShippingMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Basket}
     */
    this.putBasketsByIDShipmentsByIDShippingMethod = function(basketId, shipmentId, body, callback) {
      var postBody = body;

      // verify the required parameter 'basketId' is set
      if (basketId == undefined || basketId == null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsByIDShipmentsByIDShippingMethod");
      }

      // verify the required parameter 'shipmentId' is set
      if (shipmentId == undefined || shipmentId == null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling putBasketsByIDShipmentsByIDShippingMethod");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putBasketsByIDShipmentsByIDShippingMethod");
      }


      var pathParams = {
        'basket_id': basketId,
        'shipment_id': shipmentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Basket;

      return this.apiClient.callApi(
        '/baskets/{basket_id}/shipments/{shipment_id}/shipping_method', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
