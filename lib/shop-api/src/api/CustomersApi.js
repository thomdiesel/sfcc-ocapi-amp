/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthRequest', 'model/BasketsResult', 'model/Customer', 'model/CustomerAddress', 'model/CustomerAddressResult', 'model/CustomerOrderResult', 'model/CustomerPaymentInstrument', 'model/CustomerPaymentInstrumentRequest', 'model/CustomerPaymentInstrumentResult', 'model/CustomerProductList', 'model/CustomerProductListItem', 'model/CustomerProductListItemPurchase', 'model/CustomerProductListItemPurchaseResult', 'model/CustomerProductListItemResult', 'model/CustomerProductListResult', 'model/CustomerRegistration', 'model/PasswordChangeRequest', 'model/PasswordReset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthRequest'), require('../model/BasketsResult'), require('../model/Customer'), require('../model/CustomerAddress'), require('../model/CustomerAddressResult'), require('../model/CustomerOrderResult'), require('../model/CustomerPaymentInstrument'), require('../model/CustomerPaymentInstrumentRequest'), require('../model/CustomerPaymentInstrumentResult'), require('../model/CustomerProductList'), require('../model/CustomerProductListItem'), require('../model/CustomerProductListItemPurchase'), require('../model/CustomerProductListItemPurchaseResult'), require('../model/CustomerProductListItemResult'), require('../model/CustomerProductListResult'), require('../model/CustomerRegistration'), require('../model/PasswordChangeRequest'), require('../model/PasswordReset'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.CustomersApi = factory(root.ShopApi.ApiClient, root.ShopApi.AuthRequest, root.ShopApi.BasketsResult, root.ShopApi.Customer, root.ShopApi.CustomerAddress, root.ShopApi.CustomerAddressResult, root.ShopApi.CustomerOrderResult, root.ShopApi.CustomerPaymentInstrument, root.ShopApi.CustomerPaymentInstrumentRequest, root.ShopApi.CustomerPaymentInstrumentResult, root.ShopApi.CustomerProductList, root.ShopApi.CustomerProductListItem, root.ShopApi.CustomerProductListItemPurchase, root.ShopApi.CustomerProductListItemPurchaseResult, root.ShopApi.CustomerProductListItemResult, root.ShopApi.CustomerProductListResult, root.ShopApi.CustomerRegistration, root.ShopApi.PasswordChangeRequest, root.ShopApi.PasswordReset);
  }
}(this, function(ApiClient, AuthRequest, BasketsResult, Customer, CustomerAddress, CustomerAddressResult, CustomerOrderResult, CustomerPaymentInstrument, CustomerPaymentInstrumentRequest, CustomerPaymentInstrumentResult, CustomerProductList, CustomerProductListItem, CustomerProductListItemPurchase, CustomerProductListItemPurchaseResult, CustomerProductListItemResult, CustomerProductListResult, CustomerRegistration, PasswordChangeRequest, PasswordReset) {
  'use strict';

  /**
   * Customers service.
   * @module api/CustomersApi
   * @version 17.3
   */

  /**
   * Constructs a new CustomersApi. 
   * @alias module:api/CustomersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteCustomersAuth operation.
     * @callback module:api/CustomersApi~deleteCustomersAuthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidates the JWT provided in the header.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization the JWT token
     * @param {module:api/CustomersApi~deleteCustomersAuthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomersAuth = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/auth', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomersByIDAddressesByID operation.
     * @callback module:api/CustomersApi~deleteCustomersByIDAddressesByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to delete the address for
     * @param {String} addressName the name of the address to delete
     * @param {module:api/CustomersApi~deleteCustomersByIDAddressesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomersByIDAddressesByID = function(customerId, addressName, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDAddressesByID");
      }

      // verify the required parameter 'addressName' is set
      if (addressName == undefined || addressName == null) {
        throw new Error("Missing the required parameter 'addressName' when calling deleteCustomersByIDAddressesByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses/{address_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomersByIDPaymentInstrumentsByID operation.
     * @callback module:api/CustomersApi~deleteCustomersByIDPaymentInstrumentsByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer&#39;s payment instrument.
     * @param {String} customerId the id of the customer to delete the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be deleted
     * @param {module:api/CustomersApi~deleteCustomersByIDPaymentInstrumentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomersByIDPaymentInstrumentsByID = function(customerId, paymentInstrumentId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId == undefined || paymentInstrumentId == null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling deleteCustomersByIDPaymentInstrumentsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments/{payment_instrument_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomersByIDProductListsByID operation.
     * @callback module:api/CustomersApi~deleteCustomersByIDProductListsByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer product list.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {module:api/CustomersApi~deleteCustomersByIDProductListsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomersByIDProductListsByID = function(customerId, listId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDProductListsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomersByIDProductListsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomersByIDProductListsByIDItemsByID operation.
     * @callback module:api/CustomersApi~deleteCustomersByIDProductListsByIDItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an item from a customer product list.
     * @param {String} customerId The id of the owner of the product list
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to delete.
     * @param {module:api/CustomersApi~deleteCustomersByIDProductListsByIDItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomersByIDProductListsByIDItemsByID = function(customerId, listId, itemId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByID operation.
     * @callback module:api/CustomersApi~getCustomersByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a customer.
     * @param {String} customerId The customer id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {module:api/CustomersApi~getCustomersByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.getCustomersByID = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByID");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDAddresses operation.
     * @callback module:api/CustomersApi~getCustomersByIDAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerAddressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a sorted pageable list of all customer addresses in the address book. The default page size is 10  customer addresses. The addresses are sorted so that the preferred address is always sorted first. The remaining  addresses are sorted alphabetically by ID.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId The customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {module:api/CustomersApi~getCustomersByIDAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerAddressResult}
     */
    this.getCustomersByIDAddresses = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDAddresses");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddressResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDAddressesByID operation.
     * @callback module:api/CustomersApi~getCustomersByIDAddressesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to retrieve the address for
     * @param {String} addressName the name of the address to retrieve
     * @param {module:api/CustomersApi~getCustomersByIDAddressesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerAddress}
     */
    this.getCustomersByIDAddressesByID = function(customerId, addressName, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDAddressesByID");
      }

      // verify the required parameter 'addressName' is set
      if (addressName == undefined || addressName == null) {
        throw new Error("Missing the required parameter 'addressName' when calling getCustomersByIDAddressesByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;

      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses/{address_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDBaskets operation.
     * @callback module:api/CustomersApi~getCustomersByIDBasketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the baskets of a customer.
     * @param {String} customerId the id of the customer to retrieve the baskets for
     * @param {module:api/CustomersApi~getCustomersByIDBasketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketsResult}
     */
    this.getCustomersByIDBaskets = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDBaskets");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = BasketsResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/baskets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDOrders operation.
     * @callback module:api/CustomersApi~getCustomersByIDOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerOrderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a pageable list of all customer&#39;s orders. The default page size is 10.
     * @param {String} customerId the customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {Boolean} opts.crossSites 
     * @param {String} opts.from 
     * @param {String} opts.until 
     * @param {String} opts.status 
     * @param {module:api/CustomersApi~getCustomersByIDOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerOrderResult}
     */
    this.getCustomersByIDOrders = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDOrders");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'cross-sites': opts['crossSites'],
        'from': opts['from'],
        'until': opts['until'],
        'status': opts['status']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerOrderResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDPaymentInstruments operation.
     * @callback module:api/CustomersApi~getCustomersByIDPaymentInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPaymentInstrumentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets customer payment instruments for an customer.  Can be limited to a specific payment  method by providing query parameter payment_method_id.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId the id of the customer to retrieve the payment instruments for
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentMethodId 
     * @param {module:api/CustomersApi~getCustomersByIDPaymentInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPaymentInstrumentResult}
     */
    this.getCustomersByIDPaymentInstruments = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDPaymentInstruments");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'payment_method_id': opts['paymentMethodId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerPaymentInstrumentResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDPaymentInstrumentsByID operation.
     * @callback module:api/CustomersApi~getCustomersByIDPaymentInstrumentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPaymentInstrument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a customer&#39;s payment instrument by its id.
     * @param {String} customerId the id of the customer to retrieve the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be retrievedCustomer
     * @param {module:api/CustomersApi~getCustomersByIDPaymentInstrumentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPaymentInstrument}
     */
    this.getCustomersByIDPaymentInstrumentsByID = function(customerId, paymentInstrumentId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId == undefined || paymentInstrumentId == null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling getCustomersByIDPaymentInstrumentsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerPaymentInstrument;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments/{payment_instrument_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDProductLists operation.
     * @callback module:api/CustomersApi~getCustomersByIDProductListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all customer product lists.
     * @param {String} customerId The customer id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {module:api/CustomersApi~getCustomersByIDProductListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListResult}
     */
    this.getCustomersByIDProductLists = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductLists");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDProductListsByID operation.
     * @callback module:api/CustomersApi~getCustomersByIDProductListsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a customer product list of the given customer.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {module:api/CustomersApi~getCustomersByIDProductListsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductList}
     */
    this.getCustomersByIDProductListsByID = function(customerId, listId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductList;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDProductListsByIDItems operation.
     * @callback module:api/CustomersApi~getCustomersByIDProductListsByIDItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItemResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a pageable list of all items of a customer&#39;s product list. The default page size is 10.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Number} opts.start 
     * @param {Number} opts.count 
     * @param {module:api/CustomersApi~getCustomersByIDProductListsByIDItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItemResult}
     */
    this.getCustomersByIDProductListsByIDItems = function(customerId, listId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItems");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItems");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'start': opts['start'],
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDProductListsByIDItemsByID operation.
     * @callback module:api/CustomersApi~getCustomersByIDProductListsByIDItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an item of a customer product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {module:api/CustomersApi~getCustomersByIDProductListsByIDItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItem}
     */
    this.getCustomersByIDProductListsByIDItemsByID = function(customerId, listId, itemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItem;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDProductListsByIDItemsByIDPurchases operation.
     * @callback module:api/CustomersApi~getCustomersByIDProductListsByIDItemsByIDPurchasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItemPurchaseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all purchases of an item from a customer&#39;s product list.
     * @param {String} customerId The id of the customer to retrieve the product list item purchases for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve from.
     * @param {module:api/CustomersApi~getCustomersByIDProductListsByIDItemsByIDPurchasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItemPurchaseResult}
     */
    this.getCustomersByIDProductListsByIDItemsByIDPurchases = function(customerId, listId, itemId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByIDPurchases");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchaseResult;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}/purchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersByIDProductListsByIDItemsByIDPurchasesByID operation.
     * @callback module:api/CustomersApi~getCustomersByIDProductListsByIDItemsByIDPurchasesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItemPurchase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a purchase of an item from a customer&#39;s product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {String} purchaseId The id of the product list item purchase to retrieve.
     * @param {module:api/CustomersApi~getCustomersByIDProductListsByIDItemsByIDPurchasesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItemPurchase}
     */
    this.getCustomersByIDProductListsByIDItemsByIDPurchasesByID = function(customerId, listId, itemId, purchaseId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'purchaseId' is set
      if (purchaseId == undefined || purchaseId == null) {
        throw new Error("Missing the required parameter 'purchaseId' when calling getCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId,
        'purchase_id': purchaseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchase;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}/purchases/{purchase_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCustomersByID operation.
     * @callback module:api/CustomersApi~patchCustomersByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a customer.
     * @param {String} customerId the customer id
     * @param {module:model/Customer} body 
     * @param {module:api/CustomersApi~patchCustomersByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.patchCustomersByID = function(customerId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByID");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCustomersByIDAddressesByID operation.
     * @callback module:api/CustomersApi~patchCustomersByIDAddressesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to update the address for
     * @param {String} addressName the name of the address to update
     * @param {module:model/CustomerAddress} body 
     * @param {module:api/CustomersApi~patchCustomersByIDAddressesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerAddress}
     */
    this.patchCustomersByIDAddressesByID = function(customerId, addressName, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDAddressesByID");
      }

      // verify the required parameter 'addressName' is set
      if (addressName == undefined || addressName == null) {
        throw new Error("Missing the required parameter 'addressName' when calling patchCustomersByIDAddressesByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDAddressesByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;

      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses/{address_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCustomersByIDProductListsByID operation.
     * @callback module:api/CustomersApi~patchCustomersByIDProductListsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a product list. Changeable properties are the name, description and if the list is public.
     * @param {module:model/CustomerProductList} body 
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {module:api/CustomersApi~patchCustomersByIDProductListsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductList}
     */
    this.patchCustomersByIDProductListsByID = function(body, customerId, listId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByID");
      }

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductList;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCustomersByIDProductListsByIDItemsByID operation.
     * @callback module:api/CustomersApi~patchCustomersByIDProductListsByIDItemsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an item of a customer&#39;s product list.  Considered values from the request body are:    priority: This is the priority of the customer&#39;s product list item.  public: This is the flag whether the customer&#39;s product list item is public.  quantity: used for product item type only. This is the quantity of  the customer&#39;s product list item.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property  must correspond to a custom attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItem.  The value of this property must be valid for the type of custom attribute defined for ProductListItem.  
     * @param {String} customerId The id of the owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to update.
     * @param {module:model/CustomerProductListItem} body 
     * @param {module:api/CustomersApi~patchCustomersByIDProductListsByIDItemsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItem}
     */
    this.patchCustomersByIDProductListsByIDItemsByID = function(customerId, listId, itemId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByIDItemsByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItem;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCustomersByIDProductListsByIDItemsByIDPurchasesByID operation.
     * @callback module:api/CustomersApi~patchCustomersByIDProductListsByIDItemsByIDPurchasesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItemPurchase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a purchase of an item from a customer&#39;s product list.  Considered values from the request body are:    custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property  must correspond to a custom attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItemPurchase.  The value of this property must be valid for the type of custom attribute defined for ProductListItemPurchase.  
     * @param {String} customerId The id of the customer to retrieve the product list item purchases for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {String} purchaseId The id of the product list item purchase to retrieve.
     * @param {module:model/CustomerProductListItemPurchase} body 
     * @param {module:api/CustomersApi~patchCustomersByIDProductListsByIDItemsByIDPurchasesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItemPurchase}
     */
    this.patchCustomersByIDProductListsByIDItemsByIDPurchasesByID = function(customerId, listId, itemId, purchaseId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'purchaseId' is set
      if (purchaseId == undefined || purchaseId == null) {
        throw new Error("Missing the required parameter 'purchaseId' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByIDItemsByIDPurchasesByID");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId,
        'purchase_id': purchaseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchase;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}/purchases/{purchase_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomers operation.
     * @callback module:api/CustomersApi~postCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a customer.  The mandatory data are the credentials and profile last name and email.  When using OAuth the password in the request must not be set, otherwise an InvalidPasswordException will be thrown.  When using JWT the password is required.
     * @param {module:model/CustomerRegistration} body 
     * @param {module:api/CustomersApi~postCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.postCustomers = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersAuth operation.
     * @callback module:api/CustomersApi~postCustomersAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains a new JWT (JSON Web Token) for a guest or registered  customer. Tokens are returned as a HTTP Authorization:Bearer response  header entry. These kinds of request are supported, as specified by the  type:    Type guest - creates a new guest (non-authenticated) customer  and returns a token for the customer.  Type credentials - authenticates credentials passed in the  HTTP Authorization:Basic request header, returning a token for a  successfully authenticated customer otherwise results in an  AuthenticationFailedException.  Type session - authenticates the customer (anonymous or registered)  on base of dwsid and dwsecuretoken cookies. It returns a token for a  successfully authenticated customer, otherwise results in an  AuthenticationFailedException.  Type refresh - examines the token passed in the HTTP  Authorization:Bearer request header and when valid returns a new token  with an updated expiry time.     For a request of type credentials:    Updates profile attributes for the customer (for example,  \&quot;last-visited\&quot;).  Handles the maximum number of failed login attempts.    For a request of type session:    Does not touch profile attributes for the registered customer (for example,  \&quot;last-visited\&quot;), since this is not a real login.  Returns different tokens for multiple requests with the same session id. Means, there should be  only one call per session.      About JWT The token contains 3 sections:    the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id,  issue and expiration time)  finally the signature section records the token signature.    A token is created and returned to the client whenever a registered  customer logs in (type \&quot;credentials\&quot;) or a guest customer requests it (type  \&quot;guest\&quot;). The token is returned in the response header as   Authorization: Bearer --token--    The client has to include the token in the request header as   Authorization: Bearer --token--   in any follow up request. The server declines any follow up requests  without a token or which cannot be verified based on the token signature  or expiration time. A token nearing its expiration time should be  exchanged for a new one (type \&quot;refresh\&quot;).    See \&quot;API Usage &gt; JWT\&quot; for more details on using JWT as an authentication  mechanism.
     * @param {module:model/AuthRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization              Authorization:Basic for type credentials             Authorization:Bearer for type refresh             
     * @param {module:api/CustomersApi~postCustomersAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.postCustomersAuth = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersAuth");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = ['client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDAddresses operation.
     * @callback module:api/CustomersApi~postCustomersByIDAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new address with the given name for the given customer.
     * @param {String} customerId the id of the customer to create the address for
     * @param {module:model/CustomerAddress} body 
     * @param {module:api/CustomersApi~postCustomersByIDAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerAddress}
     */
    this.postCustomersByIDAddresses = function(customerId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDAddresses");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDAddresses");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerAddress;

      return this.apiClient.callApi(
        '/customers/{customer_id}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDAuth operation.
     * @callback module:api/CustomersApi~postCustomersByIDAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains a new agent on behalf token for a registered customer. Token is returned as a HTTP Authorization:Bearer  response header entry.    A token is created and returned to the client whenever an agent with Create_Order_On_Behalf_Of permission calls  the resource for a registered customer.  The token is returned in the response header as Authorization: Bearer --token--.   The client has to include the token in the request header as Authorization: Bearer --token--  in any follow up request, the agent will do on behalf of the customer.    About the order on behalf token    The token contains 3 sections:    the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id, issue and expiration time)  finally the signature section records the token signature.    A token nearing its expiration time should be exchanged for a new one by calling this resource once more.
     * @param {String} customerId specifies the customer to act on behalf of
     * @param {module:api/CustomersApi~postCustomersByIDAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.postCustomersByIDAuth = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDAuth");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/{customer_id}/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDPasswordReset operation.
     * @callback module:api/CustomersApi~postCustomersByIDPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a password reset process. A password reset token is generated and passed together with the customer  resolved by the id provided as path parameter to a afterPOST hook. The hook  dw.ocapi.shop.customer.password_reset.afterPOST can utilize the provided reset token, for example to send a reset email.
     * @param {String} customerId the id of the customer
     * @param {module:api/CustomersApi~postCustomersByIDPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postCustomersByIDPasswordReset = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDPasswordReset");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/password_reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDPaymentInstruments operation.
     * @callback module:api/CustomersApi~postCustomersByIDPaymentInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPaymentInstrument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payment instrument to a customer information.
     * @param {String} customerId the id of the customer
     * @param {module:model/CustomerPaymentInstrumentRequest} body 
     * @param {module:api/CustomersApi~postCustomersByIDPaymentInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPaymentInstrument}
     */
    this.postCustomersByIDPaymentInstruments = function(customerId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDPaymentInstruments");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDPaymentInstruments");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerPaymentInstrument;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment_instruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDProductLists operation.
     * @callback module:api/CustomersApi~postCustomersByIDProductListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a customer product list.
     * @param {module:model/CustomerProductList} body 
     * @param {String} customerId The customer id.
     * @param {module:api/CustomersApi~postCustomersByIDProductListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductList}
     */
    this.postCustomersByIDProductLists = function(body, customerId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductLists");
      }

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductLists");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductList;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDProductListsByIDItems operation.
     * @callback module:api/CustomersApi~postCustomersByIDProductListsByIDItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an item to the customer&#39;s product list. Considered values from the request body are:    type: a valid type, mandatory. This is the type of the item to be added to the customer&#39;s product  list.  priority: This is the priority of the item to be added to the customer&#39;s product list.  public: This is the flag whether the item to be added to the customer&#39;s product list is public.  product_id: a valid product id, used for product item type only. This is the id (sku)  of the product related to the item to be added to the customer&#39;s product list. It is mandatory for  product item type and it must be a valid product id, otherwise  ProductListProductIdMissingException or ProductListProductNotFoundException  will be thrown.  quantity: used for product item type only. This is the quantity of the item to be  added to the customer&#39;s product list.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItem. The value of this property must be valid for the  type of custom attribute defined for ProductListItem.  
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list
     * @param {module:model/CustomerProductListItem} body 
     * @param {module:api/CustomersApi~postCustomersByIDProductListsByIDItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItem}
     */
    this.postCustomersByIDProductListsByIDItems = function(customerId, listId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductListsByIDItems");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomersByIDProductListsByIDItems");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductListsByIDItems");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItem;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersByIDProductListsByIDItemsByIDPurchases operation.
     * @callback module:api/CustomersApi~postCustomersByIDProductListsByIDItemsByIDPurchasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerProductListItemPurchase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a purchase to an item in the customer&#39;s product list. Considered values from the request body are:    purchaser_name: name of the purchaser, mandatory. This is the full name of the purchaser of this product  list item.  quantity: amount purchased, mandatory. This is the quantity of the items purchased from  the product list.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItemPurchase. The value of this property must be valid for the  type of custom attribute defined for ProductListItemPurchase.  
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item where to add the purchase.
     * @param {module:model/CustomerProductListItemPurchase} body 
     * @param {module:api/CustomersApi~postCustomersByIDProductListsByIDItemsByIDPurchasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerProductListItemPurchase}
     */
    this.postCustomersByIDProductListsByIDItemsByIDPurchases = function(customerId, listId, itemId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      // verify the required parameter 'itemId' is set
      if (itemId == undefined || itemId == null) {
        throw new Error("Missing the required parameter 'itemId' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductListsByIDItemsByIDPurchases");
      }


      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = CustomerProductListItemPurchase;

      return this.apiClient.callApi(
        '/customers/{customer_id}/ProductLists/{list_id}/items/{item_id}/purchases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCustomersPasswordReset operation.
     * @callback module:api/CustomersApi~postCustomersPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a password reset process. A password reset token is generated and  together with the resolved customer is passed to a afterPOST  hook. The customer resolution is based on the password reset request  type. Currently the resolution can be done by email or login. In case of  an email the password reset hook is only executed if one and only one  customer has been identified for that email. In the case that more than  one customers have been identified for the provided email the resource  does nothing.
     * @param {module:model/PasswordReset} body 
     * @param {module:api/CustomersApi~postCustomersPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postCustomersPasswordReset = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersPasswordReset");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/password_reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCustomersByIDPassword operation.
     * @callback module:api/CustomersApi~putCustomersByIDPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the customer&#39;s password.
     * @param {String} customerId the customer id
     * @param {module:model/PasswordChangeRequest} body 
     * @param {module:api/CustomersApi~putCustomersByIDPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCustomersByIDPassword = function(customerId, body, callback) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId == undefined || customerId == null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomersByIDPassword");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomersByIDPassword");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
