/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Basket', 'model/Note', 'model/NotesResult', 'model/Order', 'model/OrderPaymentInstrumentRequest', 'model/PaymentMethodResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Basket'), require('../model/Note'), require('../model/NotesResult'), require('../model/Order'), require('../model/OrderPaymentInstrumentRequest'), require('../model/PaymentMethodResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.OrdersApi = factory(root.ShopApi.ApiClient, root.ShopApi.Basket, root.ShopApi.Note, root.ShopApi.NotesResult, root.ShopApi.Order, root.ShopApi.OrderPaymentInstrumentRequest, root.ShopApi.PaymentMethodResult);
  }
}(this, function(ApiClient, Basket, Note, NotesResult, Order, OrderPaymentInstrumentRequest, PaymentMethodResult) {
  'use strict';

  /**
   * Orders service.
   * @module api/OrdersApi
   * @version 17.3
   */

  /**
   * Constructs a new OrdersApi. 
   * @alias module:api/OrdersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteOrdersByIDNotesByID operation.
     * @callback module:api/OrdersApi~deleteOrdersByIDNotesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an order note.
     * @param {String} orderNo the id of the order to be modified
     * @param {String} noteId the id of the note to be removed
     * @param {module:api/OrdersApi~deleteOrdersByIDNotesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.deleteOrdersByIDNotesByID = function(orderNo, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling deleteOrdersByIDNotesByID");
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteOrdersByIDNotesByID");
      }


      var pathParams = {
        'order_no': orderNo,
        'note_id': noteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrdersByIDPaymentInstrumentsByID operation.
     * @callback module:api/OrdersApi~deleteOrdersByIDPaymentInstrumentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a payment instrument of an order.
     * @param {String} orderNo the order number
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @param {module:api/OrdersApi~deleteOrdersByIDPaymentInstrumentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.deleteOrdersByIDPaymentInstrumentsByID = function(orderNo, paymentInstrumentId, callback) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling deleteOrdersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId == undefined || paymentInstrumentId == null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling deleteOrdersByIDPaymentInstrumentsByID");
      }


      var pathParams = {
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}/payment_instruments/{payment_instrument_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersByID operation.
     * @callback module:api/OrdersApi~getOrdersByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information for an order.
     * @param {String} orderNo the order number
     * @param {module:api/OrdersApi~getOrdersByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.getOrdersByID = function(orderNo, callback) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling getOrdersByID");
      }


      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersByIDNotes operation.
     * @callback module:api/OrdersApi~getOrdersByIDNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves notes for an order.
     * @param {String} orderNo The id of the order from which you want to retrieve notes.
     * @param {module:api/OrdersApi~getOrdersByIDNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotesResult}
     */
    this.getOrdersByIDNotes = function(orderNo, callback) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling getOrdersByIDNotes");
      }


      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = NotesResult;

      return this.apiClient.callApi(
        '/orders/{order_no}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersByIDPaymentMethods operation.
     * @callback module:api/OrdersApi~getOrdersByIDPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethodResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     * @param {String} orderNo the order number
     * @param {module:api/OrdersApi~getOrdersByIDPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethodResult}
     */
    this.getOrdersByIDPaymentMethods = function(orderNo, callback) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling getOrdersByIDPaymentMethods");
      }


      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = PaymentMethodResult;

      return this.apiClient.callApi(
        '/orders/{order_no}/payment_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrdersByID operation.
     * @callback module:api/OrdersApi~patchOrdersByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order.   Considered fields for update are status (same status transitions are possible as for dw.order.Order.setStatus(int  status) plus CREATED to FAILED) and custom properties. During the call the correct channel type will be assured to be set for the order  in a successful call. Without agent context the channel type will be storefront otherwise callcenter.
     * @param {String} orderNo the order number
     * @param {module:model/Order} body 
     * @param {module:api/OrdersApi~patchOrdersByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.patchOrdersByID = function(orderNo, body, callback) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchOrdersByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchOrdersByID");
      }


      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrdersByIDPaymentInstrumentsByID operation.
     * @callback module:api/OrdersApi~patchOrdersByIDPaymentInstrumentsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payment instrument of an order and passes the order and updated payment instrument to the correct  payment authorizeCreditcard or authorize hook.   Details:    The payment instrument is updated with the provided details. The payment method must be applicable for the  order see GET /baskets/{basket_id}/payment_methods, if the payment method is &#39;CREDIT_CARD&#39; a  payment_card must be specified in the request.      Order authorization:      To authorize the order one of two possible customization hooks is called and an  dw.order.OrderPaymentInstrument is passed as an input argument.      Which hook is called?      If the request includes a payment_card or the dw.order.OrderPaymentInstrument  contains a creditCardType the customization hook dw.order.payment.authorizeCreditCard is called.  See dw.order.hooks.PaymentHooks.authorizeCreditCard(order : Order, paymentDetails : OrderPaymentInstrument, cvn : String) : Status.  Otherwise dw.order.payment.authorize is called.  See dw.order.hooks.PaymentHooks.authorize(order : Order, paymentDetails : OrderPaymentInstrument) : Status.      What is the dw.order.OrderPaymentInstrument input argument passed to the hook?      If the request contains a customer_payment_instrument_id the  dw.order.OrderPaymentInstrument is copied from the customer payment instrument (An exception is thrown  if none was found).  Otherwise the data from the request document is passed (payment_card or  payment_bank_account etc. information).      Note: the amount and the security_code (cvn) contained in the  payment_card data will be propagated if available to  dw.order.payment.authorizeCreditCard even if the dw.order.OrderPaymentInstrument is  resolved from a customer payment instrument.      Customization hook dw.ocapi.shop.order.afterPatchPaymentInstrument is called. The default  implementation places the order if the order status is CREATED and the authorization amount equals or exceeds the  order total. Placing the order (equivalent to calling dw.order.OrderMgr.placeOrder(order : Order)  in the scripting API) results in the order being changed to status NEW and prepared for export.  
     * @param {String} orderNo the order number
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @param {module:model/OrderPaymentInstrumentRequest} body 
     * @param {module:api/OrdersApi~patchOrdersByIDPaymentInstrumentsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.patchOrdersByIDPaymentInstrumentsByID = function(orderNo, paymentInstrumentId, body, callback) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchOrdersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId == undefined || paymentInstrumentId == null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling patchOrdersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchOrdersByIDPaymentInstrumentsByID");
      }


      var pathParams = {
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}/payment_instruments/{payment_instrument_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrders operation.
     * @callback module:api/OrdersApi~postOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits an order based on a prepared basket.  Note: If the basket has been submitted  using Order Center (considered by it&#39;s client id) the channel type will  be set to \&quot;Call Center\&quot;. In case another channel type was set by a script  before submitting the basket, the channel type will be reset to  \&quot;Call Center\&quot; and a warning will be logged.  The only considered value from the request body is basket_id.
     * @param {module:model/Basket} body 
     * @param {module:api/OrdersApi~postOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.postOrders = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postOrders");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrdersByIDNotes operation.
     * @callback module:api/OrdersApi~postOrdersByIDNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a note to an existing order.
     * @param {String} orderNo The id of the order to be modified.
     * @param {module:model/Note} body 
     * @param {module:api/OrdersApi~postOrdersByIDNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.postOrdersByIDNotes = function(orderNo, body, callback) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling postOrdersByIDNotes");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postOrdersByIDNotes");
      }


      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrdersByIDPaymentInstruments operation.
     * @callback module:api/OrdersApi~postOrdersByIDPaymentInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payment instrument to an order. It is possible either to supply the full payment information or only a  customer payment instrument id and amount. In case the customer payment instrument id was set all the other  properties (except amount) are ignored and the payment data is resolved from the stored customer payment  information. An attempt is made to authorize the order by passing it to the authorize or authorizeCreditCard  hook.   Details:    The payment instrument is added with the provided details or the details from the customer payment  instrument. The payment method must be applicable for the order see GET  /baskets/{basket_id}/payment_methods, if the payment method is &#39;CREDIT_CARD&#39; a  payment_card must be specified in the request.      Order authorization:      To authorize the order one of two possible customization hooks is called and an  dw.order.OrderPaymentInstrument is passed as an input argument.      Which hook is called?      If the request includes a payment_card or the dw.order.OrderPaymentInstrument  contains a creditCardType the customization hook dw.order.payment.authorizeCreditCard is called.   See dw.order.hooks.PaymentHooks.authorizeCreditCard(order : Order, paymentDetails : OrderPaymentInstrument, cvn : String) : Status.  Otherwise dw.order.payment.authorize is called. See dw.order.hooks.PaymentHooks.authorize(order : Order, paymentDetails : OrderPaymentInstrument) : Status.      What is the dw.order.OrderPaymentInstrument input argument passed to the hook?      If the request contains a customer_payment_instrument_id the  dw.order.OrderPaymentInstrument is copied from the customer payment instrument (An exception is thrown  if none was found).  Otherwise the data from the request document is passed (payment_card or  payment_bank_account etc. information).      Note: the amount and the security_code (cvn) contained in the  payment_card data will be propagated if available to  dw.order.payment.authorizeCreditCard even if the dw.order.OrderPaymentInstrument is  resolved from a customer payment instrument.      Customization hook dw.ocapi.shop.order.afterPostPaymentInstrument is called. The default  implementation places the order if the order status is CREATED and the authorization amount equals or exceeds the  order total. Placing the order (equivalent to calling dw.order.OrderMgr.placeOrder(order : Order) in the  scripting API) results in the order being changed to status NEW and prepared for export.  
     * @param {String} orderNo the order number
     * @param {module:model/OrderPaymentInstrumentRequest} body 
     * @param {module:api/OrdersApi~postOrdersByIDPaymentInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.postOrdersByIDPaymentInstruments = function(orderNo, body, callback) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo == undefined || orderNo == null) {
        throw new Error("Missing the required parameter 'orderNo' when calling postOrdersByIDPaymentInstruments");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling postOrdersByIDPaymentInstruments");
      }


      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_no}/payment_instruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
