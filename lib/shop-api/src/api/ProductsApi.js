/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Product', 'model/ProductResult', 'model/ShippingMethodResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Product'), require('../model/ProductResult'), require('../model/ShippingMethodResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.ProductsApi = factory(root.ShopApi.ApiClient, root.ShopApi.Product, root.ShopApi.ProductResult, root.ShopApi.ShippingMethodResult);
  }
}(this, function(ApiClient, Product, ProductResult, ShippingMethodResult) {
  'use strict';

  /**
   * Products service.
   * @module api/ProductsApi
   * @version 17.3
   */

  /**
   * Constructs a new ProductsApi. 
   * @alias module:api/ProductsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getProductsByID operation.
     * @callback module:api/ProductsApi~getProductsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To access single products resource, you construct a URL using the template shown below. This template requires  you to specify an Id (typically a SKU) for a product. In response, the server returns a corresponding Product  document, provided the product is online and assigned to site catalog. The document contains variation attributes  (including values) and the variant matrix; this data is provided for both the master and for the variant.
     * @param {String} id The id of the requested product.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @param {Boolean} opts.allImages 
     * @param {module:api/ProductsApi~getProductsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByID = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByID");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'inventory_ids': this.apiClient.buildCollectionParam(opts['inventoryIds'], 'csv'),
        'currency': opts['currency'],
        'locale': opts['locale'],
        'all_images': opts['allImages']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDAvailability operation.
     * @callback module:api/ProductsApi~getProductsByIDAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product availability information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDAvailability = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDAvailability");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'inventory_ids': this.apiClient.buildCollectionParam(opts['inventoryIds'], 'csv'),
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/availability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDBundledProducts operation.
     * @callback module:api/ProductsApi~getProductsByIDBundledProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access bundled product information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDBundledProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDBundledProducts = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDBundledProducts");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/bundled_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDImages operation.
     * @callback module:api/ProductsApi~getProductsByIDImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product image information of products that are online and assigned to site catalog. Filter the result by  view type and variation values.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.viewType 
     * @param {Boolean} opts.allImages 
     * @param {String} opts.variationAttribute 
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDImages = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDImages");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'view_type': this.apiClient.buildCollectionParam(opts['viewType'], 'csv'),
        'all_images': opts['allImages'],
        'variation_attribute': opts['variationAttribute'],
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDLinks operation.
     * @callback module:api/ProductsApi~getProductsByIDLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product link information of products that are online and assigned to site catalog. Filter the result by  link type and link direction.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.direction 
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDLinks = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDLinks");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'type': opts['type'],
        'direction': opts['direction'],
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDOptions operation.
     * @callback module:api/ProductsApi~getProductsByIDOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product option information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDOptions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDOptions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDPrices operation.
     * @callback module:api/ProductsApi~getProductsByIDPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product price information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDPrices = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDPrices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDPromotions operation.
     * @callback module:api/ProductsApi~getProductsByIDPromotionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product promotion information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDPromotionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDPromotions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDPromotions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'currency': opts['currency'],
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/promotions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDRecommendations operation.
     * @callback module:api/ProductsApi~getProductsByIDRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product recommendation information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.recommendationType 
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDRecommendations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDRecommendations");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'recommendation_type': opts['recommendationType'],
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDSetProducts operation.
     * @callback module:api/ProductsApi~getProductsByIDSetProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product set information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDSetProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDSetProducts = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDSetProducts");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/set_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDShippingMethods operation.
     * @callback module:api/ProductsApi~getProductsByIDShippingMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShippingMethodResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the applicable shipping methods for a certain product.
     * @param {String} id the requested product id
     * @param {module:api/ProductsApi~getProductsByIDShippingMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShippingMethodResult}
     */
    this.getProductsByIDShippingMethods = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDShippingMethods");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ShippingMethodResult;

      return this.apiClient.callApi(
        '/products/{id}/shipping_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDVariations operation.
     * @callback module:api/ProductsApi~getProductsByIDVariationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access product variation information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @param {module:api/ProductsApi~getProductsByIDVariationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductsByIDVariations = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDVariations");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/products/{id}/variations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByIDs operation.
     * @callback module:api/ProductsApi~getProductsByIDsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @param {Boolean} opts.allImages 
     * @param {module:api/ProductsApi~getProductsByIDsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResult}
     */
    this.getProductsByIDs = function(ids, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling getProductsByIDs");
      }


      var pathParams = {
        'ids': ids
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'inventory_ids': this.apiClient.buildCollectionParam(opts['inventoryIds'], 'csv'),
        'currency': opts['currency'],
        'locale': opts['locale'],
        'all_images': opts['allImages']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = ProductResult;

      return this.apiClient.callApi(
        '/products/({ids})', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
