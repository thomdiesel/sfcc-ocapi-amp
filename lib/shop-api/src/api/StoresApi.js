/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Store', 'model/StoreResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Store'), require('../model/StoreResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ShopApi) {
      root.ShopApi = {};
    }
    root.ShopApi.StoresApi = factory(root.ShopApi.ApiClient, root.ShopApi.Store, root.ShopApi.StoreResult);
  }
}(this, function(ApiClient, Store, StoreResult) {
  'use strict';

  /**
   * Stores service.
   * @module api/StoresApi
   * @version 17.3
   */

  /**
   * Constructs a new StoresApi. 
   * @alias module:api/StoresApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getStores operation.
     * @callback module:api/StoresApi~getStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource retrieves a list of stores, for the given site, that are within a configured distance of a location  on the earth. The stores and their distance from the specified location are returned as a result set of Store  objects. The distance is interpreted either in miles or kilometers depending on the \&quot;distance_unit\&quot; input  parameter.   The location can be specified by either directly providing a latitude/longitude coordinate pair or by providing a  country and a postal code:    If a postal code is passed, the resource looks in the system&#39;s geolocation mappings to find the coordinates  for this postal code. If no matching geolocation is found, the resource will return an empty list of stores.  If coordinates are passed, the values for country and postal code are ignored.  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.latitude The geo coordinate latitude to search for stores                       (value range -90.00 .. 90.00).
     * @param {Number} opts.longitude The geo coordinate longitude to search for stores                       (value range -180.00 .. 180.00).
     * @param {String} opts.countryCode The two letter ISO country code e.g. \&quot;US\&quot;.
     * @param {String} opts.postalCode The postal code e.g. \&quot;01801\&quot;.
     * @param {String} opts.distanceUnit The distance unit. Supported values are \&quot;mi\&quot; and \&quot;km\&quot;                       (for miles and kilometers respectively, default is \&quot;km\&quot;).
     * @param {Number} opts.maxDistance The area (radius) in distancUnit where stores will be                       searched for (default is half of the earth&#39;s perimeter).
     * @param {Number} opts.start The result set index to return the first instance for. Default value is 0.
     * @param {Number} opts.count The maximum number of instances per request. Default value is 25.
     * @param {module:api/StoresApi~getStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreResult}
     */
    this.getStores = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'country_code': opts['countryCode'],
        'postal_code': opts['postalCode'],
        'distance_unit': opts['distanceUnit'],
        'max_distance': opts['maxDistance'],
        'start': opts['start'],
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = StoreResult;

      return this.apiClient.callApi(
        '/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresByID operation.
     * @callback module:api/StoresApi~getStoresByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To access a store, you construct a URL using the template shown below. This template requires you to specify a  store id. In the response, the server returns a corresponding store document.
     * @param {String} id The id of the requested store.
     * @param {module:api/StoresApi~getStoresByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Store}
     */
    this.getStoresByID = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getStoresByID");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = Store;

      return this.apiClient.callApi(
        '/stores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresByIDs operation.
     * @callback module:api/StoresApi~getStoresByIDsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} ids 
     * @param {module:api/StoresApi~getStoresByIDsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreResult}
     */
    this.getStoresByIDs = function(ids, callback) {
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling getStoresByIDs");
      }


      var pathParams = {
        'ids': ids
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['customers_auth', 'client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = StoreResult;

      return this.apiClient.callApi(
        '/stores/({ids})', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
